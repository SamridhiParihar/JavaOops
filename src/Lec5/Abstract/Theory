1.Abstract Class :
                   An abstract class in Java is a class that cannot be instantiated directly and is intended to be
                   subclassed. It can contain both abstract methods (methods without a body) and non-abstract methods
                   (methods with a body).
2.Key Points:(Abstract classes)
    * An abstract class cannot be instantiated or objects can't be created
    * It can have both abstract and concrete methods.
    * It can have constructors and member variables.
    * It can have static methods.
    * It can have final methods, which cannot be overridden by subclasses.
    * It can't be final because it is intended to be overridden and final stops it

3.Key Points:(Abstract Methods)
    * An abstract method has no body.
    * It must be implemented by any non-abstract subclass.
    * It can only be declared in an abstract class.
    * It can't be static because it needs to overridden but static stops that

4.Interfaces:
    An interface in Java is a reference type, similar to a class, that can contain only constants,
    method signatures, default methods, static methods, and nested types. Interfaces cannot
    contain instance fields or constructors.
5.Notes:(Interfaces):

    a.KeyPoints(interface):
        * A blueprint for a class that can contain constants, method signatures, default methods,
          static methods, and nested types.
        * A class can implement multiple interfaces
        * Interfaces cannot have instance fields or constructors.
        * An interface can extend other interfaces but cannot implement a class.
        * Implementing classes must provide implementations for all abstract methods unless the
          class is abstract.

    b.KeyPoints(Methods):
        * Abstract methods: public and abstract, must be implemented by implementing classes
        * Default methods: Can provide a concrete implementation ,an be overridden by implementing
                           classes and must be done during conflicts (multiple inheritance)
        * static methods: Belong to the interface itself and should be concrete

    c. KeyPoints(Variables):
        * All variables are implicitly public, static, and final.
        * Variables are constants and must be initialized.

6. Separate classes but in same interface (see programs)

7. @Override annotation itself is a interface

8.